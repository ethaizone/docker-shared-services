services:
  # --- Core Database Service (PostgreSQL) ---
  # Internal: accessed via 'shared_postgres:5432'
  postgres:
    image: postgres:${POSTGRES_VERSION:-15-alpine}
    container_name: shared_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME:-mydatabase}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    # They bind ONLY to localhost (127.0.0.1) for security.
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - shared_services_network

  # --- Core Cache Service (Redis) ---
  # Internal: accessed via 'shared_redis:6379'
  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: shared_redis
    # They bind ONLY to localhost (127.0.0.1) for security.
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - shared_services_network

  # --- Core Database Service (MongoDB) ---
  # Internal: accessed via 'shared_mongodb:27017'
  mongodb:
    image: mongo:${MONGO_VERSION:-6.0} # Using MongoDB 6.0 as a common choice
    container_name: shared_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE:-admin} # The default database for initial user creation
    # They bind ONLY to localhost (127.0.0.1) for security.
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db # Persistent data directory
    networks:
      - shared_services_network
    # Optional: Configure replica set for full features (e.g., transactions)
    # command: mongod --replSet rs0 --bind_ip_all
    # healthcheck:
    #   test: echo 'db.runCommand("ping").ok' | mongosh --host localhost:27017 --authenticationDatabase admin -u mongouser -p mongopassword --quiet
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s

  # --- Core Database Service (MySQL) ---
  # Internal: accessed via 'shared_mysql:3306'
  mysql:
    image: mysql:${MYSQL_VERSION:-8.0} # Using MySQL 8.0 as a common choice
    container_name: shared_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE_NAME:-mydatabase}
      MYSQL_USER: ${MYSQL_USER:-user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
    # They bind ONLY to localhost (127.0.0.1) for security.
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql # Persistent data directory
    networks:
      - shared_services_network
    healthcheck: # Basic health check to ensure MySQL is ready
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # --- Core Message Broker Service (RabbitMQ) ---
  # Internal: accessed via 'shared_rabbitmq:5672', management UI at 'localhost:15672'
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: shared_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-password}
    ports:
      - "5672:5672" # AMQP protocol
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - shared_services_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  shared_services_network:
    name: shared_services_network

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  mysql_data:
  rabbitmq_data:
